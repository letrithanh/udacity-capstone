version: 2.1

jobs:
  lint:
    docker:
      - image: circleci/node:16.13
    steps:
      - checkout
      - restore_cache:
          keys: ["node_modules"]
      - run:
          name: install dependencies
          command: |
            npm install
      - run:
          name: linting code
          command: |
            npm run lint
      - save_cache:
          paths: ["node_modules"]
          key: "node_modules"

  create-docker-image:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            docker build -t ${DOCKERHUB_USERNAME}/udacity-capstone:${CIRCLE_WORKFLOW_ID:0:7} .
      - run: 
          name: Publish Docker Image to Docker Hub
          command: |
            echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
            docker push ${DOCKERHUB_USERNAME}/udacity-capstone:${CIRCLE_WORKFLOW_ID:0:7}

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            INFRAS_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=udacity-capstone" \
              --output text)

            if [ -z "$INFRAS_PUBLIC_IP" ]
            then
              echo "Creating infrastructure..."
              aws cloudformation deploy \
                --template-file .circleci/files/infrastructure.yml \
                --tags project=udacity-capstone \
                --stack-name "udacity-capstone"
            else
              echo "Infrastucture was existed"
            fi
      - run:
          name: Get IP for Ansible
          command: |
            echo "[host]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=udacity-capstone" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  
  configure-infrastructure:
    docker:
      - image: python:3.7.14-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "81:28:16:7b:01:1e:9d:51:ca:60:94:76:7c:1e:f0:21"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

  deploy-app:
    docker:
      - image: python:3.7.14-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "81:28:16:7b:01:1e:9d:51:ca:60:94:76:7c:1e:f0:21"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            cat << EOF > deployment.yml
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: uda-capstone
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: uda-capstone
              template:
                metadata:
                  labels:
                    app: uda-capstone
                spec:
                  containers:
                  - name: uda-capstone
                    image: ${DOCKERHUB_USERNAME}/udacity-capstone:${CIRCLE_WORKFLOW_ID:0:7}
                    ports:
                    - containerPort: 3000
            
            ---

            apiVersion: v1
            kind: Service
            metadata:
              name: udacaps-svc
            spec:
              type: NodePort
              ports:
              - port: 3000
                targetPort: 3000
                nodePort: 30080
              selector:
                app: uda-capstone
            EOF
            
            mv deployment.yml .circleci/ansible/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-app.yml

workflows:
  default:
    jobs:
      - lint
      - create-docker-image:
          requires: [lint]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-app:
          requires: [create-docker-image, configure-infrastructure]

